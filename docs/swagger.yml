swagger: "2.0"
info:
  description: "A simple Flask REST API with JWT authentication and role-based access control."
  version: "1.0.0"
  title: "Flask API with JWT and Role-Based Access Control"
schemes:
  - "http"

tags:
  - name: "Auth"
    description: "Authentication and Authorization APIs"
  - name: "Articles"
    description: "Manage Articles"
  - name: "Users"
    description: "Manage Users"

paths:
  # Auth section
  /login:
    post:
      tags:
        - "Auth"
      summary: "Login to get a JWT token."
      description: "Logs in a user and returns a JWT token for authentication."
      parameters:
        - in: "body"
          name: "body"
          description: "Login credentials"
          required: true
          schema:
            type: "object"
            properties:
              username:
                type: "string"
                example: "admin_user"
              password:
                type: "string"
                example: "adminpass"
      responses:
        200:
          description: "Login successful"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Login successful"
              token:
                type: "string"
                example: "your_jwt_token_here"
        401:
          description: "Invalid username or password"

  # Articles section
  /articles:
    get:
      tags:
        - "Articles"
      summary: "Get all articles."
      description: "Fetches all articles."
      security:
        - bearerAuth: []
      responses:
        200:
          description: "List of articles"
          schema:
            type: "array"
            items:
              type: "object"
              properties:
                id:
                  type: "integer"
                  example: 1
                title:
                  type: "string"
                  example: "Article Title"
                content:
                  type: "string"
                  example: "Article content goes here."
                author:
                  type: "string"
                  example: "johndoe"
        403:
          description: "Permission denied"

    post:
      tags:
        - "Articles"
      summary: "Create a new article."
      description: "Allows a logged-in user to create a new article."
      security:
        - bearerAuth: []
      parameters:
        - in: "body"
          name: "body"
          description: "Article details"
          required: true
          schema:
            type: "object"
            properties:
              title:
                type: "string"
                example: "New Article"
              content:
                type: "string"
                example: "Content of the new article."
      responses:
        201:
          description: "Article created successfully"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                example: "Article created successfully"
        403:
          description: "Permission denied"

  /articles/{id}:
    get:
      tags:
        - "Articles"
      summary: "Get article by ID."
      description: "Fetches an article by ID."
      parameters:
        - in: "path"
          name: "id"
          required: true
          type: "integer"
          description: "ID of the article"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Article details"
          schema:
            type: "object"
            properties:
              id:
                type: "integer"
                example: 1
              title:
                type: "string"
                example: "Article Title"
              content:
                type: "string"
                example: "Article content goes here."
              author:
                type: "string"
                example: "johndoe"
        404:
          description: "Article not found"

    put:
      tags:
        - "Articles"
      summary: "Update article."
      description: "Allows users with permissions to update an article."
      parameters:
        - in: "path"
          name: "id"
          required: true
          type: "integer"
          description: "ID of the article"
        - in: "body"
          name: "body"
          description: "Article details to update"
          required: true
          schema:
            type: "object"
            properties:
              title:
                type: "string"
                example: "Updated Article Title"
              content:
                type: "string"
                example: "Updated article content."
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Article updated successfully"
        403:
          description: "Permission denied"

    delete:
      tags:
        - "Articles"
      summary: "Delete article."
      description: "Allows users with permissions to delete an article."
      parameters:
        - in: "path"
          name: "id"
          required: true
          type: "integer"
          description: "ID of the article"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "Article deleted successfully"
        403:
          description: "Permission denied"

  # Users section
  /users:
    get:
      tags:
        - "Users"
      summary: "Get all users."
      description: "Fetches all users. Only admins can view all users."
      security:
        - bearerAuth: []
      responses:
        200:
          description: "List of users"
        403:
          description: "Permission denied"

    post:
      tags:
        - "Users"
      summary: "Create a new user."
      description: "Only admins can create a new user."
      parameters:
        - in: "body"
          name: "body"
          description: "User details"
          required: true
          schema:
            type: "object"
            properties:
              username:
                type: "string"
                example: "janedoe"
              password:
                type: "string"
                example: "password123"
              role:
                type: "string"
                example: "editor"
      security:
        - bearerAuth: []
      responses:
        201:
          description: "User created successfully"
        403:
          description: "Permission denied"

  /users/{id}:
    get:
      tags:
        - "Users"
      summary: "Get user by ID."
      description: "Fetches a user by ID."
      parameters:
        - in: "path"
          name: "id"
          required: true
          type: "integer"
          description: "ID of the user"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "User details"

    put:
      tags:
        - "Users"
      summary: "Update user details."
      description: "Only admins can update user details."
      parameters:
        - in: "path"
          name: "id"
          required: true
          type: "integer"
          description: "ID of the user"
        - in: "body"
          name: "body"
          description: "Updated user details"
          required: true
          schema:
            type: "object"
            properties:
              username:
                type: "string"
              password:
                type: "string"
              role:
                type: "string"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "User updated successfully"

    delete:
      tags:
        - "Users"
      summary: "Delete a user."
      description: "Only admins can delete a user."
      parameters:
        - in: "path"
          name: "id"
          required: true
          type: "integer"
          description: "ID of the user"
      security:
        - bearerAuth: []
      responses:
        200:
          description: "User deleted successfully"

securityDefinitions:
  bearerAuth:
    type: "apiKey"
    name: "Authorization"
    in: "header"
